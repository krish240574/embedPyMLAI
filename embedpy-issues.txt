Ways the embedPy feature/object gets used:

Import a module - 
np:.p.import`numpy - returns a embedPy object with pointers to all methods inside numpy

npar:.p.import[`numpy;`array;* or < or >] - returns a embedPy, q or foreign(python) object with the array() method as "callable" - automatically happens. 

equivalent to 
np:.p.import `numpy
npar:.p.callable np`array; 

can also be used as 
np:.p.import`numpy;
np[`array;*;(1000 1000 1000;1000 1000 1000)]

Another example :
drf:.p.import[`dicom;`read_file;*] / .p.callable return of method read_file inside dicom
drf <filename> / - string file name

Instantiating objects 

pd:.p.import `pandas
pd[`DataFrame;*][] - calls default constructor
without parens, returns an embedPy <class DataFframe> 
or
.p.import[`pandas;`DataFrame;*][] - calls default constructor

df:..p.import[`pandas;`DataFrame;*] - get class , then instantiate later by 
df[<appropriate object>];

Chaining embedpy objects 
q)np:.p.import`numpy
q)v:np[`arange;*;12]
q)v`
0 1 2 3 4 5 6 7 8 9 10 11
q)v[`mean;<][]
5.5
q)rs:v[`reshape;<]
q)rs[3;4]
0 1 2  3 
4 5 6  7 
8 9 10 11
q)rs[2;6]
0 1 2 3 4  5 
6 7 8 9 10 11
q)np[`arange;*;12][`reshape;*;3;4]`
0 1 2  3 
4 5 6  7 
8 9 10 11
q)np[`arange;*;12][`reshape;*;3;4][`T]`
0 1  2 
3 4  5 
6 7  8 
9 10 11

Equivalence of .p.import[] and .p.callable - 
q)stdout:.p.callable(.p.import[`sys]`stdout.write)
q)stdout"hello\n";
hello
q)stderr:.p.import[`sys;`stderr.write;*]
q)stderr"goodbye\n";
goodbye



